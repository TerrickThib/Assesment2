**Terrick Thibodeaux**  
s218032  
Math For Games  
Assment 2, Translation, Rotation, Scale  

# I.Requirements  
**1.Description of Problem**

**Name:** Assment 2 

**Problem Statement:**  
Creation of a 2D or 3D application that demostrates Rotation, translation, scale and a Matrix Heiercy, Also demenstats use of AABB Colliders or Circle Coliders.  

**Problem Specifications:**     
- Shows the use of Matrix Heiercy using a parent child Relationship.  
- The game shows Rotation by having a child parented that shows rotation.
- The game also shows scale by scaling the enemy which also scales the child.   
- Shows translation by haveing both the player and the enemy move around the game area.  
- Shows a example of AABB Colision.


**2.Input Information**   
- Takes in players movement, to navigate the play area.  
- Takes in players use of projectiles, to determine if it colides with enemy.  
- Also uses players location, to have enemy follow him.  
- Also uses players Location to figure out Velocity.  

**3.Output Information**  
- Uses the information gathered to progress the game by killing the enemy or your self.  

**4.User Interface Information**  
- Displays The players sprite as well as the enemy.   

# II.Design  
1. *System Architecture*  
All Objects are in there own class which could inherete from onother class. There are child actors which are tied to there Parent actor. This Parent actor Pesutes the players Actor and will do damage if touched. The Game Engine uses a Start, Update, Draw  and EndFunction as well as a Scene class to progress through the game.   

2. *Object Information  
    * **File Name:** AABBCollider.cs  
        * Name: Width 
            * Description: Is the width the collider box will be    
            * Visiblity: Public  
        * Name: Height  
            * Description: Is the height the collider box will be  
            * Visiblity: Public 
        * Name: Left 
            * Description: Is the farthest left x position of this collider
            * Visiblity: Public 
        * Name: Right 
            * Description: Is the farthest right x position of this collider  
            * Visiblity: Public  
        * Name: Top   
            * Description: Is the farthest y position upwards of this collider  
            * Visiblity: Public  
        * Name: Bottom  
            * Description: Is the farthest y position downwards of this collider  
            * Visiblity: Public  
        * Name: AABBCollider(float width, float height, Actor owner) : base(owner, ColliderType.AABB)    
            * Description: Is declairing what a AABBCollider will need to be created.  
            * Visiblity: Public  
        * Name: CheckCollisionAABB(AABBCollider other)  
            * Description: Checks if there is a overlap of hit boxes between a AABBCollider to see if collision happens if there is return true there is collision if not return false.  
            * Visiblity: Public  
        * Name: CheckCollisionCircle(CircleCollider other)  
            * Description: Checks to see if there is collision with a circle collider if there is none return AABBCollision.  
            * Visiblity: Public  
        * Name: Draw ( )  
            * Description: If needed draws hit boxs.  
            * Visiblity: Public   
    * **File Name:** CircleCollider.cs  
        * Name: CollisionRadius  
            * Description: Is the size of the circle hit box also allows it to be used in other parts of code  
            * Visiblity: Public  
        * Name: CircleCollider(float collisionRadius, Actor owner) : base(owner, ColliderType.Circle)    
            * Description: Declares what a circle collider is and what values it will take in  
            * Visiblity: Public  
        * Name: CheckCollisionCircle(CircleCollider other)  
            * Description: Finds the distance between the two actors and the radii combined and if the distance between the two colliders are less than the radii return collision  
            * Visiblity: Public  
        * Name: CheckCollisionAABB(AABBColider other)   
            * Description: Returns false if this collider is checking against itself, It gets the direction of this collider to the AABB collider clamps it then gets the closest point to the circle to find the distance from the circles closes point returns collision if distancefrom the closest point is lest than combined Radius.  
            * Visiblity: Public  
        * Name: Draw( )   
            * Description: Draws the Circle hit boxes if need to  
            * Visiblity: Public  
        * Name: SetScale(float value)  
            * Description: Sets value to be CollisionRadius  
            * Visiblity: Public  
    * **File Name:** Collider.cs  
        * Name: Owner  
            * Description: Sets there to be a actor that will house a collider  
            * Visiblity: Public  
        * Name: ColliderType  
            * Description: Allowes you to select a collider type  
            * Visiblity: Public  
        * Name: Collider(Actor owner, ColliderType colliderType)  
            * Description: Sets Up what a base coolider needs that being a actor and type  
            * VIsiblity: Public 
        * Name: CheckCollision(Actor other)  
            * Description: Check for collision and for what type and returns that corrected type of collsion  
            * Visiblity: Public  
        * Name: CheckCollisionCircle(CircleCollider other)  
            * Description: Checks for circle collision if none return false  
            * Visiblity: Public  
        * Name: CheckCollisionAABB(AABBCollider other)  
            * Description: Checks for AABB collision if none return false  
            * Visiblity: Public  
        * Name: Draw( ) 
            * Description: Draws colliders 
            * Visiblity: Public  
        * Name: SetScale(float value)  
            * Description: Sets a template for set scale  
            * Visiblity: Public  
    * **File Name:** Actor.cs   
    * **Class Name:** Actor 
        * Name: Started  
            * Description: Returns start  
            * Visiblity: Public            
        * Name: Vector2 LocalPosition  
            * Description: Takes in a new vector 2 and sets its translation  
            * Visiblity: Public  
            * Arguments: Vector2(translation)              
        * Name: Vector2 WorldPosition  
            * Description: Returns Vector2 global transforms and converts world corridents into local cooridents.  
            * Visiblity: Public  
            * Arguments: Vector2(globaltransforms)  
        * Name: Matrix3 GlobalTransform  
            * Description: Sets global tranform to equal value and returns _globalTransform 
            * Visiblity: Public  
        * Name: Matrix3 LocalTransform  
            * Description: Sets local transform to equal value and returns _localTransform  
            * Visiblity: Public  
        * Name: Actor Parent  
            * Description: Sets parent to equal value and returns _parent 
            * Visiblity: Public  
        * Name: Actor[] Children  
            * Description: Returns _children 
            * Visiblity: Public  
        * Name: Vector2 Size  
            * Description: Takes in two new vectors times ther magnitude to create a x and y scale thens sets Scale to be those values   
            * Visiblity: Public  
            * Arguments: Vector2(scale)  
        * Name: Vector2 Forward  
            * Description: Normales a value and addes LocalPosition to get a point to look at the return that new vector  
            * Visiblity: Public  
            * Arguments: Vector2(Rotation), LocalPosition  
        * Name: Sprite  
            * Description: Gives sprite a value and returns _sprite  
            * Visiablity: Public  
        * Name: Collider  
            * Description: Gives collider a value and returns _collider  
            * Visiablity: Public  
        * Name: Actor(floatx, float y, string name = "Actor", string path = "") : this (new Vector2 {X = x, Y = y}, name, path)   
            * Description: Is what a verision of Actor is and what it takes in.  
            * Visiablity: Public  
        * Name: Actor(Vector2 position, string name = "Actor", string path = "")  
            * Description: Declares what a actor is and what values it takes in and sets sprites image to be on actor. 
            * Visiblity: Public    
        * Name: UpdateTransforms( )  
            * Description: Updates localtransform by rotation, translation and scale, also check is parent is not null if so GlobalTransform is Parents globaltransform * localTransform  
            * Visiblity: Public  
            * Arguments: Localtransform, Parent GlobalTransform   
        * Name: AddChild(Actor child)  
            * Description: Takes a child actor and sets it to be childed to a parent  
            * Visiablity: Public   
            * Arguments: Child and Parent  
        * Name: RemoveChild(Actor child )  
            * Description: Removes child from Parent and scene  
            * Visiablity: Public  
            * Arguments: child  
        * Name: Start( )  
            * Description: Sets Start to be true  
            * Visablity: Public  
        * Name: Update(float deltaTime)  
            * Description: Updates The actors positions 
            * Visabity: Public  
        * Name: Draw( )  
            * Description: Draws the sprites onto the actors if not null  
            * Visablity: Public  
            * Arguments: GlobalTransform and sprite  
        * Name: End( ) 
            * Description: 
            * Visablity: Public  
        * Name: OnCollision(Actor actor)  
            * Description:  
            * Visablity: Public  
        * Name: CheckForCollision(other)  
            * Description: Checks if there is collision between two colliders if not return false if so return Collision  
            * Visablity: Public  
            * Arguments: Collider  
        * Name: SetTranslation(float translationX, float translationY)  
            * Description: Sets the translation to be the new Matrix3 createdtranslation  
            * Visablity: Public  
            * Arguments: translationX, translationY and Matrix3  
        * Name: Translate(float translationX, float translationY)  
            * Description: Sets translation to be translation * new created translation  
            * Visablity: Public  
            * Arguments: translationX, translationY, and Matrix3  
        * Name: SetRotation(float radians)  
            * Description: Sets Rotation by using createrotation which takes in radians  
            * Visablity: Public  
            * Arguments: radians and matrix3  
        * Name: Rotate(float radians)  
            * Description: Sets rotation to be rotation * creatrotation radians  
            * Visablity: Public  
            * Arguments: Radians, Matrix3  
        * Name: SetScale(float x, float y)  
            * Description: Sets scale by takeing in two floats and creating a scale  
            * Visablity: Public  
            * Arguments: x, y and Matrix3  
        * Name: Scale( floatx, float y)  
            * Decription: Sets the scale to be the new created scale  
            * Visablity: Public  
            * Arguments: x, y, Matrix3  
        * Name: LookAt(Vector2 position)  
            * Description: Finds the direction the actors should be looking and roates the actors so it looks at that given position  
            * Visablity: Public  
            * Arguments: Vector2 position, LocalPosition and Forward   
    * **File Name** Enemy.cs   
    * **Class Name:** Enemy   
        * Name: Speed  
            * Description: Holds a varable for speed and returns _speed and sets it a value 
            * Visablity: Public  
        * Name: Vector2 Velocity  
            * Description: Holds a value for velocity and returns _ velocity  
            * Visablity: Public  
        * Name: MaxViewingAngle  
            * Description: Holds a value for viewing angle and returns _maxViewingAngle  
            * Visablity: Public 
        * Name: MaxSightDistance  
            * Description: Holds a value for MaxSightDistance and returns _maxsightdistance  
            * Visablity: Public  
        * Name: Health  
            * Description: Holds a value for health and returns _health  
            * Visablity: Public 
        * Name: Enemy(float x, float y, float speed, float health, float maxSightDistance, float maxViewingAngle, Player player,Scene scene, string name = "Actor", string path = "")
            : base(x, y,name, path)  
            * Description: Declares what values a enemy will need to have  
            *Visablity: Public  
        * Name: Update(float deltaTime)     
            * Description: Updates the enemys based on the game.   
            * Visablity: Public  
        * Name: GetTargetInSight( )  
            * Description: Gets players position relative to yours and normalises it  
            * Visablity: Public  
        * Name: GetTargetIndistance( )  
            * Description: Gets the distance of the player from the enmey to see if its with in sight distance  
            * Viablity: Public  
        * Name: OnCollision(Actor actor)  
            * Description: Empty for colision with a actor  
            * Visablity: Public  
        * Name: Draw( ) 
            * Description: Calls Base Draw and draws Colliders  
            * Visablity: Public  
        * Name: IfHealthLowUpgrade( )  
            * Description: If actors health equals 5 set scale and change collider size  
            * Visablity: Public  
        * Name: HealthNoneDead( ) 
            * Description: If actors health equals 0 or less remove actor from scene and end game  
            * Visablity: Public 
    * **File Name** Player.cs   
    * **Class Name:** Player
        * Name: Speed  
            * Description: Sets a value for speed and returns _speed 
            * Visablity: Public  
        * Name: Vector2 Velocity 
            * Description: Sets a value for velocity and returns _velocity   
            * Visablity: Public  
        * Name: Health  
            * Description: Sets a value for Health and returns _health 
            * Visablity: Public  
        * Name: _cooldowntimer  
            * Description: Creates a cooldown timer that has a default value of o.5f   
            * Visablity: Private  
        * Name: _timesincelastshot  
            * Discription: Holds a value of 0 to reset timer  
            * Visablity: Private  
        * Name: Player ( float x, float y, float health, float speed,Scene scene, string name = "Actor", string path = "") 
            : base(x, y, name, path)  
            * Description: Declares what values a player will have  
            * Visablity: Public  
        * Name: Update(float deltaTime)  
            * Description: Updates the player based on the game
            * Visablity: Public  
        * Name: OnCollision(Actor actor) 
            * Description: If collision happens with a enemy of Smashbros decrment players health  
            * Visablity: Public  
        * Name: Draw( )  
            * Description: Calls BAse draw and draws colliders  
            * Visablity: Public  
        * Name: DeadEndGame( )  
            * Description: If players health =< 0 then Close engine  
            * Visablity: Public  
    * **File Name** Projectiles.cs   
    * **Class Name:** Projectiles 
        * Name: Speed  
            * Description: Sets a value for speed and returns _speed 
            * Visablity: Public  
        * Name: Vector2 Velocity 
            * Description: Sets a value for velocity and returns _velocity   
            * Visablity: Public   
        * Name: _xdirection  
            * Description: a varable for the x direction  
            * Visablity: Private  
        * Name: _ydirection  
            * Description: a varable for the y direction  
            * Visablity: Private  
        * Name: Projectiles(float x, float y, float speed, int xdirection, int ydirection, Scene scene, string name = "Actor", string path = "")
            : base(x, y, name, path)  
            * Description: Sets what values a Projectile should have  
            * Visablity: Public  
        * Name: Update(float deltaTime)   
            * Description: Updates the Projectile 
            * Visablity: Public  
        * Name: OnCollision(Actor actor)  
            * Description: If the projectile collides with a enemy decrement enemmy health by -1 and removes this actor
            * Visablity: Public  
        * Name: Draw( )  
            * Description: Calls base Draw and Collider draw  
            * Visablity: Public   
        * Name: BuletOutOfBounds( )  
            * Description: If Projectile reaches the set boundres remove that actor  
            * Visablity: Public  
    * **File Name** SmashBros.cs  
        * Name: SmashBros(float x, float y, Player player, string name = "Actor", string path = "")
            : base(x, y, name, path)  
            * Description: Sets the values that SMashBros should have  
            * Visablity: Public  
        * Name: Update(float deltaTime)  
            * Description: Updates Smashbros  
            * Visablity: Public  
        * Name: Draw( )  
            * Description: Calls base Draw and Collider draw  
            * Visablity: Public    
        * Name: OnCollision(Actor actor)  
            * Description: Would be called OcCollision  
            * Visablity: Public  
    * **File Name** Sprite.cs  
        * Name: Width 
            * Description: Is the width the sprite will be and returns _texture.width   
            * Visiblity: Public  
        * Name: Height  
            * Description: Is the height the sprite will be and return _texture.height 
            * Visiblity: Public   
        * Name: Sprite(string path)  
            * Description: Will take in a path then uses it to load texture  
            * Visablity: Public  
        * Name: Draw(Matrix3 transform)  
            * Description: Finds the scale of the sprite and sets the sprites center to be the transfoms orgin and draws the sprite  
            * Visablity: Public  
    * **File Name** Scene.cs  
        * Name: Scene( )  
            * Description: Puts _ actors into a Actors array  
            * Visablity: Public  
        * Name: Start( )  
            * Description: Calls start for all the actors in the actor array  
            * Visablity: Public  
        * Name: Update(float deltaTime)  
            * Description: Calls Update for every actor in the scene  
            * Viablity: Public  
        * Name: Draw( )  
            * Description: Calls draw for every actor in the array  
            * Viablity: Public  
        * Name: End()  
            * Description: Calls End for all the actors in the array  
            * Visablity: Public  
        * Name: AddActor(Actor actor)  
            * Description: Adds a actor to the scene  
            * Visabity: Public  
        * Name: RemoveActor(Actor actor)  
            * Description: Removes a actor from the scene  
            * Visablity: Public  
    * **File Name** Engine.cs  
        * Name: _applicationShouldClose  
            * Description: Set to false called true when application should close  
            * Visablity: Private 
        * Name: _currewntSceneIndex  
            * Description: Keeps track of the games current scene 
            * Visablity: Private  
        * Name: Scene[] _ scenes  
            * Description: Creates a array of scenes for the game to use  
            * Visablity: Private  
        * Name: Stopwatch _ stopwatch   
            * Description: Creates a varble stopwatch that keeps track of time  
            * Visablity: Private  
        * Name: Run( )  
            * Description: Is called to begin the application  
            * Visablity: Public  
        * Name: Start() 
            * Description: Intalizes all the game logic and anything that needs to be there from the begining  
            * Visablity: Private 
        * Name: Update(float deltaTime)  
            * Description: Updates everytime the game loops   
            * Visablity: Private  
        * Name: Draw( )  
            * Description: Is called evertime the game loops draws visuals  
            * Visablity: Private  
        * Name: End( )  
            * Description: Closes the game and window  
            * Visablity: Private  
        * Name: AddScene(Scene scene)  
            * Description: Adds a scene to the engins scene array  
            * Visablity: Public  
        * Name: ConsoleKey GetNextKey()  
            * Description: Gets the next key in the input stream  
            * Visablity: Public 
        * Name: CloseApplication( )  
            * Description: Causes the application should close to be true Ending application  
            * Visablity: Public  
        * Name: InitaliseActors() 
            * Decription: Adds and creats all my actors for the game   
            * Visability: Private
    * **File Name** SmashBros.cs 
        * Name: SmashBros(float x, float y, Player player, string name = "Actor", string path = "")
            * Description: sets up what variables SmashBros will have  
            * Visablity: Public  
        * Name: Update(float deltaTime)
            * Description: Updates the move ment and rotation of smashbros and any other properties  
            * Visablity: Public 
        * Name: Draw()
            * Description: Calls base draw and draws the collider  
            * Visablity: Public  
        * Name: OnCollision()
            * Description: Is called if collision happens  
            * Visablity: Public  





        
            
            






